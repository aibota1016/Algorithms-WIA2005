{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ee44b313",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SuffixTrie(object): \n",
    "\n",
    "    def __init__(self, t): \n",
    "\n",
    "        \"\"\" Make suffix trie from t \"\"\" \n",
    "\n",
    "        t += '$' # special terminator symbol \n",
    "\n",
    "        self.root = {} \n",
    "\n",
    "        for i in range(len(t)): # for each suffix \n",
    "\n",
    "            cur = self.root \n",
    "\n",
    "            for c in t[i:]: # for each character in i'th suffix \n",
    "\n",
    "                if c not in cur: \n",
    "\n",
    "                    cur[c] = {} # add outgoing edge if necessary \n",
    "\n",
    "                cur = cur[c] \n",
    "\n",
    "    def followPath(self, s): \n",
    "\n",
    "        \"\"\" Follow path given by characters of s.  Return node at \n",
    "\n",
    "            end of path, or None if we fall off. \"\"\" \n",
    "\n",
    "        cur = self.root \n",
    "\n",
    "        for c in s: \n",
    "\n",
    "            if c not in cur: \n",
    "\n",
    "                return None \n",
    "\n",
    "            cur = cur[c] \n",
    "\n",
    "        return cur \n",
    "\n",
    "    def hasSubstring(self, s): \n",
    "\n",
    "        \"\"\" Return true iff s appears as a substring of t \"\"\" \n",
    "\n",
    "        return self.followPath(s) is not None "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bda3aba6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "strie = SuffixTrie(\"algorithmisfun\") \n",
    "print(strie.hasSubstring(\"algo\"))\n",
    "print(strie.hasSubstring(\"fun\"))\n",
    "print(strie.hasSubstring(\"fn\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06642cd1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
